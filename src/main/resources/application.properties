

#Configuração do datasource
#Drivers que podem ser nativos: H2, mariaDB e postgres. Existe client MongoDB
#Poderia estar no persistence.xml, mas a documentaçaõ oficial sugere para utilize este arquivo

#quarkus.datasource.url = jdbc:postgresql://localhost:5432/postgres
#quarkus.datasource.driver = org.postgresql.Driver
#quarkus.datasource.username = postgres
#quarkus.datasource.password = postgres

#Opções disponiveis: nome (para produção, juntamente com a extensão Flyway), create, drop-and-create, drop, update
#executar ./mvnw compile quarkus:dev -Dquarkus.profile=dev

#%dev.quarkus.hibernate-orm.database.generation = drop-and-create
#%dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql

#%prod.quarkus.hibernate-orm.database.generation = none
#%prod.quarkus.hibernate-orm.sql-load-script = no-file

#
#
quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=quarkus
%prod.quarkus.datasource.password=quarkus
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/postgres
%prod.quarkus.datasource.jdbc.max-size=5
%prod.quarkus.datasource.jdbc.min-size=15

%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%dev.quarkus.hibernate-orm.sql-load-script=import-dev.sql
quarkus.hibernate-orm.log.sql=true

%prod.quarkus.hibernate-orm.database.generation=none
%prod.quarkus.hibernate-orm.sql-load-script=no-files

#quarkus.datasource."name".devservices.enabled=true.

quarkus.jaeger.service-name=aprenda-quarkus
#const(1=rastreia todas as requisições, 0=não rastreia ), probabilistic (0.2 = 20% das requisiçes são rastreadas)
#ratelimiting (2 = rastrea no maximo 2transacoes por segundo), remote (configuração será feita em um agent)
quarkus.jaeger.sampler-type=const
#todas as requisiçoes serão rastreadas
quarkus.jaeger.sampler-param=1
quarkus.jaeger.endpoint=http://localhost:14268/api/traces

quarkus.hibernate-orm.database.generation=drop-and-create


